<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>SB Admin 2 - Dashboard</title>

    <!-- Custom fonts for this template-->
    <link href="~/vendor/fontawesome-free/css/all.min.css" rel="stylesheet" type="text/css">
    <link href="~/https://fonts.googleapis.com/css?family=Nunito:200,200i,300,300i,400,400i,600,600i,700,700i,800,800i,900,900i"
          rel="stylesheet">

   
    <!-- Custom styles for this template-->
    <link href="~/css/sb-admin-2.min.css" rel="stylesheet">

    <!-- Sweet Alert -->
    <script src="~/lib/sweetalert2/sweetalert2.all.min.js"></script>

    <script>

        function showToast(message, type = 'info') {
              Swal.fire({
                toast: true,
                position: 'top-end',
                showConfirmButton: false,
                timer: 3000,
                timerProgressBar: true,
                icon: type,
                title: message
              });
            }

    </script>

</head>
<body>
    <div id="wrapper">

        <partial name="_Sidebar" />

        <div id="content-wrapper" class="d-flex flex-column">

            <div id="content">

                <partial name="_Topbar" />

       
            @RenderBody()


                <partial name="_Footer" />

                
            </div>

        </div>
        <a class="scroll-to-top rounded" href="#page-top">
            <i class="fas fa-angle-up"></i>
        </a>

        <!-- Logout Modal-->
        <div class="modal fade" id="logoutModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel"
             aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="exampleModalLabel">Ready to Leave?</h5>
                        <button class="close" type="button" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">×</span>
                        </button>
                    </div>
                    <div class="modal-body">Select "Logout" below if you are ready to end your current session.</div>
                    <div class="modal-footer">
                        <button class="btn btn-secondary" type="button" data-dismiss="modal">Cancel</button>
                        <a class="btn btn-primary" href="login.html">Logout</a>
                    </div>
                </div>
            </div>
        </div>

        <!-- Bootstrap core JavaScript-->
        <script src="~/vendor/jquery/jquery.min.js"></script>
        <script src="~/vendor/bootstrap/js/bootstrap.bundle.min.js"></script>

        <!-- Core plugin JavaScript-->
        <script src="~/vendor/jquery-easing/jquery.easing.min.js"></script>

        <!-- Custom scripts for all pages-->
        <script src="~/js/sb-admin-2.min.js"></script>

        <!-- Page level plugins -->
        <script src="~/vendor/chart.js/Chart.min.js"></script>

        <!-- Page level custom scripts -->
        <script src="~/js/demo/chart-area-demo.js"></script>
        <script src="~/js/demo/chart-pie-demo.js"></script>

        @if (TempData["SuccessMessage"] != null)
        {
            <div id="TempData_SuccessMessage" style="display:none;">@TempData["SuccessMessage"]</div>
        }

        @if (TempData["ErrorMessage"] != null)
        {
            <div id="TempData_ErrorMessage" style="display:none;">@TempData["ErrorMessage"]</div>
        }

        <script>
             document.addEventListener("DOMContentLoaded", function () {
                const successMessage = document.getElementById("TempData_SuccessMessage");
                const errorMessage = document.getElementById("TempData_ErrorMessage");

                if (successMessage) {
                    Swal.fire({
                        title: "Success!",
                        text: successMessage.textContent,
                        icon: "success",
                        timer: 2000,
                        showConfirmButton: false
                    });
                }

                if (errorMessage) {
                    Swal.fire({
                        title: "Error",
                        text: errorMessage.textContent,
                        icon: "error",
                        timer: 2000,
                        showConfirmButton: false
                    });
                }
            });
                    document.addEventListener("DOMContentLoaded", function () {
                const deleteButtons = document.querySelectorAll(".deleteBtn");

                deleteButtons.forEach(button => {
                    button.addEventListener("click", function (e) {
                        e.preventDefault();  // Prevent form submission immediately

                        const form = this.closest("form");
                        const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

                        // Show confirmation alert before deleting
                        Swal.fire({
                            title: "Are you sure?",
                            text: "You won't be able to revert this!",
                            icon: "warning",
                            showCancelButton: true,
                            confirmButtonColor: "#3085d6",
                            cancelButtonColor: "#d33",
                            confirmButtonText: "Yes, delete it!",
                            cancelButtonText: "Cancel"
                        }).then((result) => {
                            if (result.isConfirmed) {
                                // Send the delete request only if the user confirms
                                fetch(form.action, {
                                    method: 'POST',
                                    headers: {
                                        'Content-Type': 'application/x-www-form-urlencoded', // Default form submission content type
                                        'RequestVerificationToken': token // Include the anti-forgery token here
                                    },
                                    body: new URLSearchParams(new FormData(form)).toString() // Send form data
                                })
                                .then(response => response.text()) // Handle the text response (redirect URL)
                                .then(data => {
                                    // After successful deletion, show success alert and reload page
                                    Swal.fire({
                                        title: "Deleted!",
                                        text: "Author successfully deleted.",
                                        icon: "success",
                                        timer: 2000,
                                        showConfirmButton: false
                                    }).then(() => {
                                        window.location.href = "/Author/Index"; // Redirect to the Index page
                                    });
                                })
                                .catch(() => {
                                    Swal.fire("Error", "Failed to connect to the server.", "error");
                                });
                            }
                        });
                    });
                });
            });

        </script>

        


</body>
</html>
